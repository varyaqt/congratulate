import React, { useEffect, useState } from "react";
import data from "./data/congratulations.json";
import { createAssistant, createSmartappDebugger } from "@salutejs/client";
import "./App.css";

const categories = {
  birthday: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
  newyear: "–ù–æ–≤—ã–π –≥–æ–¥",
  love: "–õ—é–±–∏–º—ã–º",
  universal: "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ",
};

const initializeAssistant = (getState) => {
  if (process.env.NODE_ENV === "development") {
    return createSmartappDebugger({
      token: process.env.REACT_APP_TOKEN,
      initPhrase: `–ó–∞–ø—É—Å—Ç–∏ ${process.env.REACT_APP_SMARTAPP}`,
      getState,
      settings: {
        dubbing: true, // –≤–∫–ª—é—á–∞–µ—Ç –æ–∑–≤—É—á–∫—É
      },
    });
  }
  return createAssistant({ getState });
};

const App = () => {
  const [category, setCategory] = useState(null);
  const [assistant, setAssistant] = useState(null);
  const [initError, setInitError] = useState(null); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏

  useEffect(() => {
    const getState = () => ({
      category,
    });

    try {
      const assistantInstance = initializeAssistant(getState);

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      assistantInstance.on("error", (error) => {
        console.error("Assistant error:", error);
        setInitError(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        );
      });

      const handleData = (event) => {
        console.log("–°–æ–±—ã—Ç–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", event);

        if (event.type === "navigation") {
          const { command } = event.navigation;
          if (command === "go_to_category" && event?.navigation?.category) {
            setCategory(event?.navigation?.category);
          } else if (command === "go_home") {
            setCategory(null);
          }
        }

        if (event.type === "smart_app_data") {
          const action = event.action; // üëà –∑–∞–º–µ–Ω–∏–ª–∏ command –Ω–∞ action
          if (action?.type === "go_to_category" && action?.category) {
            setCategory(action.category);
          } else if (action?.type === "go_home") {
            setCategory(null);
          }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ (ASR) - –ó–ê–ú–ï–ù–Ø–ï–ú –≠–¢–£ –ß–ê–°–¢–¨
        if (event.type === "voice") {
          const text = event.asr?.hypotheses?.[0]?.text?.toLowerCase() || "";
          console.log("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –≥–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:", text); // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥

          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
          if (
            text.includes("–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è") ||
            text.includes("—Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è")
          ) {
            setCategory("birthday");
            assistant?.sendAction({
              type: "go_to_category",
              category: "birthday",
            });
          } else if (
            text.includes("–Ω–æ–≤—ã–π –≥–æ–¥") ||
            text.includes("—Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º")
          ) {
            setCategory("newyear");
            assistant?.sendAction({
              type: "go_to_category",
              category: "newyear",
            });
          } else if (text.includes("–ª—é–±–∏–º") || text.includes("–¥–ª—è –ª—é–±–∏–º—ã—Ö")) {
            setCategory("love");
            assistant?.sendAction({ type: "go_to_category", category: "love" });
          } else if (
            text.includes("—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å") ||
            text.includes("—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ")
          ) {
            setCategory("universal");
            assistant?.sendAction({
              type: "go_to_category",
              category: "universal",
            });
          } else if (
            text.includes("–Ω–∞–∑–∞–¥") ||
            text.includes("–º–µ–Ω—é") ||
            text.includes("–¥–æ–º–æ–π")
          ) {
            setCategory(null);
            assistant?.sendAction({ type: "go_home" });
          }
        }
      };

      assistantInstance.on("data", handleData);
      setAssistant(assistantInstance);
    } catch (e) {
      console.error("Assistant initialization failed:", e);
      setInitError(
        "–ù–∞–≤—ã–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —É–∫–∞–∑–∞–Ω—ã –æ—à–∏–±–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é."
      );
    }

    return () => {
      if (assistant?.close) assistant.close();
    };
  }, [category]);

  return (
    <div className="container">
      {category === null ? (
        <>
          <div className="header">
            <h1 className="header__title">–ü–æ–∑–¥—Ä–∞–≤–ª—è—é</h1>
            <h2 className="header__description">
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!
            </h2>
          </div>
          <div className="menu__inner">
            <div className="menu__list">
              {Object.entries(categories).map(([key, label]) => (
                <button
                  className="button"
                  key={key}
                  onClick={() => {
                    setCategory(key);
                    assistant?.sendAction({
                      type: "go_to_category",
                      category: key,
                    });
                  }}
                >
                  <span className="button__inner">{label}</span>
                </button>
              ))}
            </div>
          </div>
        </>
      ) : (
        <>
          <h1 className="header__title">{categories[category]}</h1>
          <button
            className="button button__back"
            onClick={() => setCategory(null)}
          >
            <span className="button__inner">–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é</span>
          </button>
          <ul className="congratulations__inner">
            {data[category].map((text, index) => (
              <li className="greet" key={index}>
                {text}
              </li>
            ))}
          </ul>
        </>
      )}
    </div>
  );
};

export default App;
